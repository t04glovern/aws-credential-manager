name: 'tests'

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install dependencies (ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          # libappindicator3-dev is for fixing an error https://github.com/tauri-apps/tauri/issues/5175

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Run Cargo Test
        run: cargo tarpaulin --out Xml
        working-directory: src-tauri

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "**/cobertura.xml"
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: true
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '75 85'

      - name: Add Coverage PR Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const pytestNote = '#### PyTest';
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(pytestNote);
            });

            // 2. Read the prepared format of the comment
            const coverageSummary = fs.readFileSync('./code-coverage-results.md', { encoding: 'utf-8', flag: 'r' });

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: coverageSummary
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageSummary
              });
            }
